from .. import loader, utils
import logging
import aiohttp

logger = logging.getLogger(__name__)

@loader.tds
class MistralAuto(loader.Module):
    """–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –≤ –õ–° —á–µ—Ä–µ–∑ Mistral AI —Å –ø–∞–º—è—Ç—å—é, –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∏ —Ä—É—á–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    strings = {"name": "MistralAuto"}

    def __init__(self):
        self.dialogues = {}
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "mistral_key", "",
                lambda: "üîë API-–∫–ª—é—á –æ—Ç Mistral (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å Caf...)"
            ),
            loader.ConfigValue(
                "enabled", True,
                lambda: "üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ"
            ),
            loader.ConfigValue(
                "system_prompt", "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.",
                lambda: "üß† –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–ò)"
            ),
            loader.ConfigValue(
                "use_memory", True,
                lambda: "üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å (–∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞)"
            ),
            loader.ConfigValue(
                "max_history", 10,
                lambda: "üì¶ –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"
            ),
            loader.ConfigValue(
                "blocked_users", [],
                lambda: "üö´ –°–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            ),
        )

    async def watcher(self, message):
        if not self.config["enabled"]:
            return
        if not message.is_private or message.out or not message.text:
            return
        if message.sender_id in self.config["blocked_users"]:
            return

        await self.handle_ai(message)

    async def handle_ai(self, message):
        api_key = self.config["mistral_key"]
        if not api_key:
            await message.reply("‚ùå –£–∫–∞–∂–∏ API –∫–ª—é—á —á–µ—Ä–µ–∑ `.config MistralAuto`")
            return

        uid = str(message.sender_id)
        user_text = message.text
        messages = []

        if self.config["use_memory"]:
            if uid not in self.dialogues:
                self.dialogues[uid] = []
            self.dialogues[uid].append({"role": "user", "content": user_text})
            messages = [{"role": "system", "content": self.config["system_prompt"]}] + self.dialogues[uid]
            self.dialogues[uid] = self.dialogues[uid][-self.config["max_history"] * 2:]
        else:
            messages = [
                {"role": "system", "content": self.config["system_prompt"]},
                {"role": "user", "content": user_text}
            ]

        try:
            reply = await self.ask_mistral(messages, api_key)
            if self.config["use_memory"]:
                self.dialogues[uid].append({"role": "assistant", "content": reply})
            await message.reply(reply)
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Mistral: {e}")

    async def ask_mistral(self, messages, api_key):
        url = "https://api.mistral.ai/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        data = {
            "model": "mistral-medium",
            "messages": messages,
            "temperature": 0.7
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=data, headers=headers) as resp:
                result = await resp.json()
                if "choices" not in result:
                    raise Exception(result.get("error", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                return result["choices"][0]["message"]["content"].strip()

    @loader.command()
    async def mistral(self, message):
        """<–≤–æ–ø—Ä–æ—Å> ‚Äî —Ä—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ Mistral"""
        text = utils.get_args_raw(message)
        if not text:
            return await utils.answer(message, "üìå `.mistral —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å`")

        key = self.config["mistral_key"]
        if not key:
            return await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ API –∫–ª—é—á —á–µ—Ä–µ–∑ `.config MistralAuto`")

        messages = [
            {"role": "system", "content": self.config["system_prompt"]},
            {"role": "user", "content": text}
        ]

        try:
            reply = await self.ask_mistral(messages, key)
            await utils.answer(message, reply)
        except Exception as e:
            await utils.answer(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Mistral: {e}")

    @loader.command()
    async def mistraltoggle(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ"""
        current = self.config["enabled"]
        self.config["enabled"] = not current
        await utils.answer(message, f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç: {'–≤–∫–ª—é—á—ë–Ω' if not current else '–æ—Ç–∫–ª—é—á—ë–Ω'}")

    @loader.command()
    async def mistralblock(self, message):
        """<@ –∏–ª–∏ id> ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self._get_user_id(message)
        if user is None:
            return await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        if user in self.config["blocked_users"]:
            return await utils.answer(message, "‚ö†Ô∏è –£–∂–µ –≤ —Å–ø–∏—Å–∫–µ.")
        self.config["blocked_users"].append(user)
        await utils.answer(message, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤.")

    @loader.command()
    async def mistralunblock(self, message):
        """<@ –∏–ª–∏ id> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = await self._get_user_id(message)
        if user is None:
            return await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        if user not in self.config["blocked_users"]:
            return await utils.answer(message, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ.")
        self.config["blocked_users"].remove(user)
        await utils.answer(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    async def _get_user_id(self, message):
        args = utils.get_args_raw(message)
        if not args and message.reply_to:
            reply = await message.get_reply_message()
            return reply.sender_id
        if args.isdigit():
            return int(args)
        try:
            entity = await message.client.get_entity(args)
            return entity.id
        except Exception:
            return None